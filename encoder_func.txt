

int RXLED = 17;  // The RX LED has a defined Arduino pin
// Note: The TX LED was not so lucky, we'll need to use pre-defined
// macros (TXLED1, TXLED0) to control that.
// (We could use the same macros for the RX LED too -- RXLED1,
//  and RXLED0.)

//#define CLK 14
//#define DT  16


struct encoder
{
  int clkPin;
  int dtPin;
  int previousClkState;
};


encoder enc1 = {14, 16, 0};
int counter;

void setup()
{
  pinMode(RXLED, OUTPUT);  // Set RX LED as an output
  // TX LED is set as an output behind the scenes

  Serial.begin(9600); //This pipes to the serial monitor
  Serial.println("Initialize Serial Monitor");

  pinMode(enc1.clkPin, INPUT);
  pinMode(enc1.dtPin, INPUT);

  pinMode(1, OUTPUT);
  
  //previousStateCLK = currentStateCLK = digitalRead(CLK);  
  counter = 0;
}

void loop()
{
  digitalWrite(1, HIGH);
  int prevCounter = counter;
  int enc1State = getEncoderState(enc1);
  switch(enc1State)
  {
    case 1:
      counter = counter +1;
      break;

    case 2:
      counter = counter -1;
      break;
      
    default:
      break;
  }
  if(prevCounter != counter)
    Serial.println(counter);

  digitalWrite(1, LOW);
}

int getEncoderState (encoder enc)
{
  int clk = digitalRead(enc.clkPin);
  int ret = 0;
  if(clk > 0 && clk != enc.previousClkState)
  {
    int dt = digitalRead(enc.dtPin);
    if( dt != clk)
    {
      //digitalWrite(RXLED, LOW);
      //TXLED0;
      ret = 1;
    }
    else
    {
      //digitalWrite(RXLED, HIGH);
      //TXLED1;
      ret = 2;
    }        
  }
  else
  {
    //digitalWrite(RXLED, HIGH);
    //TXLED0;
  }
  enc1.previousClkState = clk;

  return ret;
}